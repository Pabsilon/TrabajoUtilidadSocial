Git en consola.

- ¿Porqué utlizar git por consola?
	-En la inmensa mayoría de las empresas, e incluso durante la carrera, nos encontramos con que tenemos que operar en máquinas en las que no tendremos acceso físico. En estas máquinas tenemos que desplegar código que hemos desarrollado, y la mejor forma de trasladar ese código a la máquina y mantenerlo actualizado es usar Git.

- ¿Hay alguna forma más fácil?
	-Siempre hay formas de automatizar tu trabajo en UNIX. Pero para escribir un script de bash que automatice toda tu tarea, necesitas saber como funciona Git.


Bases:

	1) git config

		La primera vez que vamos a utilizar git en un sistema, o un usuario, git config permite elegir aspectos básicos de como lo vamos a usar.
		Las configuraciones se pueden hacer a nivel Local, Global o de Sistema. Lo mas normal si es un ordenador personal, utilizar la configuración global:

			git config --global user.name "Tu nombre"
			git config --global user.email "abc@ucm.es"

		Esta información está disponible en el archivo ~/.gitconfig, accesible vía cat.

	2) git init

		Para crear un nuevo repositorio, navegaremos hasta una carpeta vacía, y ejecutamos el comando

			git init

		Esto crea una nueva carpeta oculta, .git que guarda toda la información sobre tu trabajo. Ahora podemos trabajar.

	3) git clone

		En caso de querer copiar un repositorio remoto (por ejemplo, de GitHub) utilizaremos este comando.

			git clone <dirección del .git>

			Por ejemplo, el proyecto curricular de freeCodeCamp sería:

				git clone https://github.com/freeCodeCamp/freeCodeCamp.git

		Esto crea una copia funcional de proyecto, pero no podríamos subir código al repositorio original. Tenemos una copia personal.

	4) git remote

		Para poder utilizar un repositorio remoto, es decir, al que contribuir nosotros, ya porque sea nuestro, o nos hayan invitado a participar, debemos configurar el 'origen', que se haría de esta manera en Github:

			git remote add origin https://github.com/NOMBREDEUSUARIO/REPOSITORIO.git

		Para que este comando funcione, necesitamos tener un repositorio creado en Github. Este repositorio podría estar vacío, o contener un proyecto que ya está en marcha.

		A la vez, nos permite utilizar los dos siguientes comandos:

			git pull

		Que es como un git clone, salvo que sin crear una copia. Coje el proyecto en el origen, busca diferencias con la copia local que tenemos, y nos deja el repositorio en el estado mas reciente del origen. (Pedir la última versión)

			git push

		Que funciona al opuesto que el git pull. Utilizaremos los commits (punto número 6) que hayamos creado y se los aplicamos al origen. (Subir la última versión)

	5) git add

		Git add es un comando que puede coger expresiones regulares, o nombres de archivos o carpetas. Se puede ejecutar varias veces y va añadiendo succesivamente los nuevos elementos al commit.

			git add *			Esto lanzado desde la raiz del proyecto añadiría todos los cambios efectuados desde el último commit
			git add ejemplos/*	Esto añadiría todo lo cambiado en la carpeta ejemplos únicamente.

		Para ver que archivos podrían añadirse al commit, utilizamos el comando:

			git status

		Que muestra dos tipos de archivos:
			Untracked - Archivos nuevos que no existen en la versión anterior
			Modified - Archivos que hemos modificado desde la version anterior.

		Ambos tipos se añaden igual.

	6) git commit

		Git commit es el comando mas importante. Este comando coje todo lo añadido con 'git add' y lo empaqueta de manera que:
			1) Siempre podamos volver a este punto
			2) Cualquier persona que esté por detrás pueda llegar a este punto

		Es buena práxis dejar un comentario breve sobre los cambios efectuados. En consola esto se hace de la siguiente manera:

			git commit -m "Resuelto el bug que provocaba en el robot ganas irrefrenables de matar"

		Todos estos commits se pueden ver en el log:

			git log

		Que como vemos, van añadidos de un hash único.
		En caso de querer volver atrás a un cierto commit, necesitamos este hash.
			Para descartar todos los cambios y volver al último commit:
				git reset --hard
			Para descartar todos los cambios y volver a cierto commit:
				git reset --hard <HASH>
			Para guardar los cambios que tenemos hasta ahora (Quizás el último commit era completamente erroneo y estabamos trabajando):
				git stash
				git reset --hard <HASH> //Por supuesto lo hacemos a un commit anterior, hacerlo al último sería absurdo.
				git stash pop
			Git stash guarda temporalmente los cambios que tenemos.

Ramas:
	
	Las ramas en Git, permite a varias personas trabajar en un proyecto sin pisarse cambios. Cuando alguien termina una rama, incorpora sus cambios a la rama principal (Aunque normalmente sería la rama de DEV)

	Si nos encontramos con la necesidad de crear una rama, utilizamos el comando

		git checkout -b <Nombre de Rama>

	Esto nos cambia automáticamente a nuestra rama "Nombre de Rama"
	Al utilizar el comando:

		git branch

	Vemos todas las ramas que hay, con la actual resaltada en verde.
	Para cambiar entre ramas, utilizamos el comando:

		git checkout <Nombre de Rama>

	Todos los cambios en la rama se matendrán isolados del resto, hasta que decidamos hacer un merge.

	El merge es una de las acciones mas complicadas. Se resuelven diferencias, y en caso de no poder hacerse automáticamente (Dos personas en ramas distintas han cambiado de manera distinta código) le toca al usuario elegir qué cambio usar, y qué cambio eliminar.
	Debido al a dificultad en caso de conflicto, no recomendamos gestionar un merge en una máquina remota, ya que hoy en día hay muchas herramientas con GUI que simplifican mucho la tarea. En caso de que no haya confictos, el merge se realiza de la siguiente manera:

		Cambiamos a la rama en la que queremos conservar los cambios:

		git checkout master (master es la rama por defecto)

		git merge <Nombre de Rama>

		A este último comando le podemos añadir el parámetro --commit -m "mensaje" para que efectue automáticamente el commit. (En efecto, hay que commitear cualquier cambio, incluido un merge)

Con esto debería ser suficente para desplegar algo en un servidor, donde normalmente no habría que hacer cambios, pero a veces hay que cambiar alguna constante, parámetros específicos, o hacer correcciones rápidas.